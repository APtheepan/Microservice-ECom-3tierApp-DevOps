name: "Continuous Integration web CI"

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
      - '.github/workflows/web_CI.yaml'
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_ECR_REPO_NAME: ${{ vars.AWS_ECR_REPO_WEB }}
  REPOSITORY_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/
  GITHUB_REPO: Microservice-ECom-3tierApp-DevOps
  GITHUB_USER: APtheepan
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Build Docker image
          working-directory: web
          run: |
            docker build  -t nginx-instana-app -f Dockerfile .

        # Step 5: Run tests (Simple Nginx test to check if the server is running)
        - name: Test Nginx container
          run: |
            docker run -d -p 8080:80 nginx-instana-app
            sleep 10
            curl --fail http://localhost:8080 || exit 1
            
    docker-image-build_ECR-image-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Build docker image
              working-directory: user
              run: |
                docker build -t ${{env.AWS_ECR_REPO_NAME}} -f Dockerfile .

            - name: Checkout code
              uses: actions/checkout@v2

            - name: Configure aws credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              run: aws ecr get-login-password --region ${{env.AWS_REGION}} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{env.AWS_REGION}}.amazonaws.com
            - name: Push image to Amazon ECR
              run: docker tag ${{env.AWS_ECR_REPO_NAME}} ${{env.REPOSITORY_URI}}${{env.AWS_ECR_REPO_NAME}}:latest
            - name: Push image to Amazon ECR
              run: docker push ${{env.REPOSITORY_URI}}${{env.AWS_ECR_REPO_NAME}}:latest